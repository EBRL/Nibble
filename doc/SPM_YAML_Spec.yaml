version:   (int) version number of specification
SPM:
    spec:   (int) specification version
    slicetime:
        batch_n:    (int) batch number
        images:
                    {'run1.nii,1'
                     'run1.nii,2'}
                    {'run2.nii,1'
                     'run2.nii,2'}
        nslices:    (int) number of slices
        tr:         (float) volume repetition time
        ta:         (float) acquisition time
        so:         (string) slice order
        ref:        (int) reference slice
        pre:        (str) prefix to apply to slicetimed images
    realign-er:
        batch_n:    (int) batch number
        images:                    
                    {'run1.nii,1'
                     'run1.nii,2'}
                    {'run2.nii,1'
                     'run2.nii,2'}
        quality:    (float) estimation quality
        separation: (float) estimation separation
        smoothing:  (float) smoothing FWHM
        num_passes: (0 | 1) 0 - register to first, 1 - register to mean
        e_interpolation:  (1 - 7) degree of b-spline for estimation interpolation
        wrap:       (three digit string) 'X Y Z'
        weight:     (str) path to weighting image
        which:      (1x2 as str) what to output; e.g. '2 1' writes out all images + mean image
        r_interpolation:    (int) b-spline degree for writing interplation
        r_wrap:     (1x3 digit string) 'X Y Z' wrapping factor
        mask:       (0 | 1) 1 to mask images, 0 to not
        prefix:     (str) prefix character to append to realigned images
    normalize-er:
        batch_n:    (int) batch number
        source:     (str) mean image
        weight_src: (str) image to weight source
        images:     {'run1.nii,1'
                     'run1.nii,2'
                     'run2.nii,1'
                     'run2.nii,2'}
        template:   (str) path to spm_install/templates/EPI.nii
        template_weight:    (str) path to image to weight template
        source_smooth:  (int) smoothing to apply to source
        template_smooth:    (int) smoothing to apply to template
        reg_type:   ('mni' | 'subj' | 'none') regularization type
        freq_cutoff:    (int) nonlinear frequency cutoff
        iterations:     (int) nonlinear iterations
        regularization: (float) nonlinear regularization
        preserve:       (0 | 1) 0 to preserve concentrations, 1 to preserve amount
        bounding_box:   (2x3 int as str) bounding box; e.g. "78 78 78; 78 78 78"
        voxel_size:     (1x3 int as str) voxel size per dim; e.g. "2 2 2"
        interpolation:  (1-7) b-spline degree for interpolation
        wrap:       (1x3 digit string) 'X Y Z' wrapping factor
        prefix:     (str) prefix to append to normalized images
    smooth:
        batch_n:    (int) batch number
        images:     {'run1.nii,1'
                     'run1.nii,2'
                     'run2.nii,1'
                     'run2.nii,2'}
        fwhm:       (1x3 int as str) FWHM by dim; e.g. '8 8 8'
        datatype:   (0 | 2 | 4 | 8 | 16 | 64) 0 - same, 2 - unsigned char, 4 - int16, 8 - int32, 16 - float32, 64 - float64
        implicit:   (0 | 1) 0 for NOT implicit masking, 1 to turn it on
        prefix:     (str) prefix to append to smoothed images
    model:
        batch_n:    (int) batch number
        directory:  (str) path to statistics output
        timing_units:   ('scans' | 'secs') timing unit for model
        TR:         (float) time per volume
        microtime_resolution:   (int) micro time resolution
        microtime_onset:    (int) micro time onset
        session:    generated, see below
        hrf_derivatives:    (1x2 0/1) HRF derivatives (time space); e.g. '0 0' or '1 0'
        volterra_interactions:  (1 | 2) 1 to NOT model volterra interactions, 2 to do so
        global_normalization:   (Scaling | None) Apply global normalization
        explicit_mask:  (str) path to image used for explicit masking
        serial_correlations:    (AR(1) | none) Method to apply serial correlations
    session:
        batch_n:    (int) batch number, MUST BE SAME AS MODEL
        session_n:  (int) session/run number
        images:     {'run1.nii,1'
                     'run1.nii,2'}
        multiple_condition_mat: (str) path to multiple condition file
        multiple_regression_file:   (str) path to multiple condition file
        hpf:    (int) high pass filter cutoff in seconds
    estimation:
        # Classical Model estimation is hard-coded
        batch_n:    (int) batch number
        spm_mat_file:   (str) path to SPM mat created by 'model'
    contrast_manager:
        batch_n:    (int) batch number
        spm_mat_file:   (str) path to SPM mat created by 'estimation'
        contrast:   generated, see below
        delete:     (1 | 0) 1 to delete existing contrasts, 0 to keep
    contrast: # Most likely specified in a project config
        batch_n:    (int) batch number, must be same as 'contrast_manager'
        number: (int) contrast number, must be unique
        name:   (str) contrast name
        #only implemented T contrasts
        vector: (1xN 0|1 str) T contrast vector; e.g. '1 0 0'
        replication:    (none | repl | replsc | sess | both | bothsc) nothing, replicate, replicate and scale, create per session, do both, do both and scale

